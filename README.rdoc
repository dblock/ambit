= ambit

Author::    Jim Wise  (mailto:jwise@draga.com)
Copyright:: Copyright (c) 2011 Jim Wise
License::   2-clause BSD-Style (see LICENSE.txt)
URL:: https://github.com/jimwise/ruby/tree/master/ambit

== DESCRIPTION:

This is an all-ruby implementation of choose/fail nondeterministic
programming with branch cut, as described in Chapter 22 of Paul Graham's
<em>On Lisp</em>[1], Chapter, or Section 4.3 of <em>SICP</em>[2].

Due to Ruby containing a true call/cc, this is a much straighter port of
Paul Graham's scheme version of this code than his Common Lisp or my C
versions are.  :-)

== REQUIREMENTS:

<b>This code will not work in JRuby or MacRuby (no callcc).  It should work
in Ruby 1.9 with minor changes (callcc has moved to the 'continuation'
stdlib).</b>

== INSTALL:

To install: 

  $ gem install ambit

(soon -- this is not uploaded yet!)

== DEVELOPERS:

After checking out the source, run:

  $ rake newb

This task will install any missing dependencies, run the tests/specs,
and generate the RDoc.

== SYNOPSIS

=== What is Nondeterministic Programming?

Nondeterministic programming is a novel approach to problems where a
program must find a working solution out of many possible choices.  It
greatly simplifies problems such graph searching, testing combinations of
values, and so on, where there are many possible values to consider, often
in some sort of hierarchical order, but the right combination is not known
in advance.

In such a situation, it can be useful to develop a program by pretending
our programming language includes knowledge of the future -- and is thus
able to _choose_ the right answer off the bat, and simply programming as
if this is the case.

A language with support for nondeterministic programming (such as Ruby
with this gem) helps us keep up this pretense by saving the state of
computation (with some limits) whenever we make an important choice.  If
we later determine that we did _not_, in fact, make the correct choice
(lacking true language support for knowing the future), we can _fail_ the
current computation, which <em>causes computation to rewind to the last
choice made, and continue as if a different choice had been made</em>.

When all possible choices have been tried, the next time computation
_fails_, computation will be rewound to the previous choice point, and
will continue with the next possible choice from there.

Imagine, for instance, that we wish to test a combination lock with a
three-number combination, with each number between 1 and 10, inclusive:
Instead of writing code ourself to try every possible combination, we
simply proceed as if each choice was the correct one, failing if the lock
fails to open.  In short:

   first = Ambit.choose(1..10)
   second = Ambit.choose(1..10)
   third = Ambit.choose(1..10)

   Ambit.fail! unless open_lock(first, second, third)

   # when we get here, lock is open!

As our language does not actually implement knowledge of the future, this
will still try as many combinations as are needed to find the right one --
but we can program as if it has chosen the right one on the first try!

=== How to Use This Gem

To get started, include this gem using

      require 'rubygems'
      require 'ambit

This gem provides the Ambit module.  This module provides several methods
which implement nondeterministic programming.

Another option is to allocate a Ambit::Generator object explicitly, instead
of using the module-wide default.  This can be done with

	nd = Ambit::Generator::new

each object allocated in this fashion has its own set of choices, and
failing one will not directly affect others.  Nesting choices from different
Generators is a good way to make code confusing, however, and should be
avoided -- this capability is mainly provided to allow multi-threaded
programs to safely use Ambit from more than one thread (see below).

==== Choosing and Failing

==== Marking and Cutting

==== Interaction with Threading

Given the strong modifications to flow of control which occur when a path of
computation is _failed_, care must be taken when using nondeterministic
programming in a multi-threaded program.  The two main ways to do this are:

* perform all nondeterministic programming from a single thread of execution

* give each thread which will be using nondeterministic programming its own Ambit::Generator object.  This can be done easily using thread local variables:

    def nd_begin
      Thread.current[:AMB] = Ambit::Generator.new
    end

    def nd_choose choices
      Thread.current[:AMB].choose choices
    end

    def nd_fail! 
      Thread.current[:AMB].fail!
    end

=== Longer example

This solution to the N queens problem is inspired by the prolog version in
<em>The Art of Prolog</em> by Leon Sterling and Ehud Shapiro[3], but is less
elegant, as this is not prolog (and I am not Sterling or Shapiro).

   # we want to place N queens on an NxN chess board.  Since we know no two queens
   # can be in the same row, an array of N integers between 0 and N-1 will do to
   # represent the placement.  Since we know no two queens can be in the same column,
   # each number from 1 .. N will appear once in this array;  this means the solution
   # is a permutation of 1 .. N

   # Here is the complete board generator.  Next is the test if a position is safe.

   def queens n, board = []
     if board.size == n
       board
     else
       c = Ambit.choose(1..n)
       Ambit.fail! unless safe board, c
       queens n, board + [c]
     end
   end

  # board is the first M columns of an NxN board, and is valid so far.
  # piece is a proposed piece for the M+1th row of the board.
  # returns true if piece is a valid placement, false otherwise

  def safe board, piece
    board.each_with_index do |c, r|
      return false if c == piece  # same column
      # they're on the same diagonal if the distance in columns == the distance in rows
      rdist = board.size - r;
      cdist = (piece - c).abs
      return false if rdist == cdist
    end
    true
  end

The file examples/queens.rb, installed with this gem, contains a version of
this with display code, and a command-line driver to print all solutions for
a given N.

=== References

[1] Graham, Paul, <em>On Lisp</em>, Prentice Hall, 1993. Available online at http://www.paulgraham.com/onlisp.html

[2] Abelson, Harold and Gerald Jay Sussman, <em>Structure and Interpretation of Computer Programs, 2nd Edition</em>, MIT Press, 1996.  Available online at http://mitpress.mit.edu/sicp/

[3] Sterling, Leon and Ehud Shapiro, <em>The Art of Prolog</em>, MIT Press, 1994

== LICENSE:

(The BSD 2-clause License)

 Copyright (c) 2011 Jim Wise
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
